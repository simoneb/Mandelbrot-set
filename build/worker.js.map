{"version":3,"file":"worker.js","sources":["../../node_modules/@assemblyscript/loader/index.js","../../src/worker.ts"],"sourcesContent":["// Runtime header offsets\nconst ID_OFFSET = -8;\nconst SIZE_OFFSET = -4;\n\n// Runtime ids\nconst ARRAYBUFFER_ID = 0;\nconst STRING_ID = 1;\n// const ARRAYBUFFERVIEW_ID = 2;\n\n// Runtime type information\nconst ARRAYBUFFERVIEW = 1 << 0;\nconst ARRAY = 1 << 1;\nconst STATICARRAY = 1 << 2;\n// const SET = 1 << 3;\n// const MAP = 1 << 4;\nconst VAL_ALIGN_OFFSET = 6;\n// const VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\nconst VAL_SIGNED = 1 << 11;\nconst VAL_FLOAT = 1 << 12;\n// const VAL_NULLABLE = 1 << 13;\nconst VAL_MANAGED = 1 << 14;\n// const KEY_ALIGN_OFFSET = 15;\n// const KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\n// const KEY_SIGNED = 1 << 20;\n// const KEY_FLOAT = 1 << 21;\n// const KEY_NULLABLE = 1 << 22;\n// const KEY_MANAGED = 1 << 23;\n\n// Array(BufferView) layout\nconst ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\nconst ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\nconst ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\nconst ARRAYBUFFERVIEW_SIZE = 12;\nconst ARRAY_LENGTH_OFFSET = 12;\nconst ARRAY_SIZE = 16;\n\nconst BIGINT = typeof BigUint64Array !== \"undefined\";\nconst THIS = Symbol();\n\nconst STRING_SMALLSIZE = 192; // break-even point in V8\nconst STRING_CHUNKSIZE = 1024; // mitigate stack overflow\nconst utf16 = new TextDecoder(\"utf-16le\", { fatal: true }); // != wtf16\n\n/** Gets a string from memory. */\nfunction getStringImpl(buffer, ptr) {\n  let len = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2] >>> 1;\n  const wtf16 = new Uint16Array(buffer, ptr, len);\n  if (len <= STRING_SMALLSIZE) return String.fromCharCode(...wtf16);\n  try {\n    return utf16.decode(wtf16);\n  } catch {\n    let str = \"\", off = 0;\n    while (len - off > STRING_CHUNKSIZE) {\n      str += String.fromCharCode(...wtf16.subarray(off, off += STRING_CHUNKSIZE));\n    }\n    return str + String.fromCharCode(...wtf16.subarray(off));\n  }\n}\n\n/** Prepares the base module prior to instantiation. */\nfunction preInstantiate(imports) {\n  const extendedExports = {};\n\n  function getString(memory, ptr) {\n    if (!memory) return \"<yet unknown>\";\n    return getStringImpl(memory.buffer, ptr);\n  }\n\n  // add common imports used by stdlib for convenience\n  const env = (imports.env = imports.env || {});\n  env.abort = env.abort || function abort(msg, file, line, colm) {\n    const memory = extendedExports.memory || env.memory; // prefer exported, otherwise try imported\n    throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\n  };\n  env.trace = env.trace || function trace(msg, n, ...args) {\n    const memory = extendedExports.memory || env.memory;\n    console.log(`trace: ${getString(memory, msg)}${n ? \" \" : \"\"}${args.slice(0, n).join(\", \")}`);\n  };\n  env.seed = env.seed || Date.now;\n  imports.Math = imports.Math || Math;\n  imports.Date = imports.Date || Date;\n\n  return extendedExports;\n}\n\nconst E_NOEXPORTRUNTIME = \"Operation requires compiling with --exportRuntime\";\nconst F_NOEXPORTRUNTIME = function() { throw Error(E_NOEXPORTRUNTIME); };\n\n/** Prepares the final module once instantiation is complete. */\nfunction postInstantiate(extendedExports, instance) {\n  const exports = instance.exports;\n  const memory = exports.memory;\n  const table = exports.table;\n  const __new = exports.__new || F_NOEXPORTRUNTIME;\n  const __pin = exports.__pin || F_NOEXPORTRUNTIME;\n  const __unpin = exports.__unpin || F_NOEXPORTRUNTIME;\n  const __collect = exports.__collect || F_NOEXPORTRUNTIME;\n  const __rtti_base = exports.__rtti_base;\n  const getRttiCount = __rtti_base\n    ? function (arr) { return arr[__rtti_base >>> 2]; }\n    : F_NOEXPORTRUNTIME;\n\n  extendedExports.__new = __new;\n  extendedExports.__pin = __pin;\n  extendedExports.__unpin = __unpin;\n  extendedExports.__collect = __collect;\n\n  /** Gets the runtime type info for the given id. */\n  function getInfo(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = getRttiCount(U32);\n    if ((id >>>= 0) >= count) throw Error(`invalid id: ${id}`);\n    return U32[(__rtti_base + 4 >>> 2) + id * 2];\n  }\n\n  /** Gets and validate runtime type info for the given id for array like objects */\n  function getArrayInfo(id) {\n    const info = getInfo(id);\n    if (!(info & (ARRAYBUFFERVIEW | ARRAY | STATICARRAY))) throw Error(`not an array: ${id}, flags=${info}`);\n    return info;\n  }\n\n  /** Gets the runtime base id for the given id. */\n  function getBase(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = getRttiCount(U32);\n    if ((id >>>= 0) >= count) throw Error(`invalid id: ${id}`);\n    return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];\n  }\n\n  /** Gets the runtime alignment of a collection's values. */\n  function getValueAlign(info) {\n    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Gets the runtime alignment of a collection's keys. */\n  // function getKeyAlign(info) {\n  //   return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n  // }\n\n  /** Allocates a new string in the module's memory and returns its pointer. */\n  function __newString(str) {\n    if (str == null) return 0;\n    const length = str.length;\n    const ptr = __new(length << 1, STRING_ID);\n    const U16 = new Uint16Array(memory.buffer);\n    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n    return ptr;\n  }\n\n  extendedExports.__newString = __newString;\n\n  /** Reads a string from the module's memory by its pointer. */\n  function __getString(ptr) {\n    if (!ptr) return null;\n    const buffer = memory.buffer;\n    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n    if (id !== STRING_ID) throw Error(`not a string: ${ptr}`);\n    return getStringImpl(buffer, ptr);\n  }\n\n  extendedExports.__getString = __getString;\n\n  /** Gets the view matching the specified alignment, signedness and floatness. */\n  function getView(alignLog2, signed, float) {\n    const buffer = memory.buffer;\n    if (float) {\n      switch (alignLog2) {\n        case 2: return new Float32Array(buffer);\n        case 3: return new Float64Array(buffer);\n      }\n    } else {\n      switch (alignLog2) {\n        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\n        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\n        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\n        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n      }\n    }\n    throw Error(`unsupported align: ${alignLog2}`);\n  }\n\n  /** Allocates a new array in the module's memory and returns its pointer. */\n  function __newArray(id, values) {\n    const info = getArrayInfo(id);\n    const align = getValueAlign(info);\n    const length = values.length;\n    const buf = __new(length << align, info & STATICARRAY ? id : ARRAYBUFFER_ID);\n    let result;\n    if (info & STATICARRAY) {\n      result = buf;\n    } else {\n      __pin(buf);\n      const arr = __new(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n      __unpin(buf);\n      const U32 = new Uint32Array(memory.buffer);\n      U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\n      U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n      U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\n      if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n      result = arr;\n    }\n    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n    if (info & VAL_MANAGED) {\n      for (let i = 0; i < length; ++i) {\n        const value = values[i];\n        view[(buf >>> align) + i] = value;\n      }\n    } else {\n      view.set(values, buf >>> align);\n    }\n    return result;\n  }\n\n  extendedExports.__newArray = __newArray;\n\n  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */\n  function __getArrayView(arr) {\n    const U32 = new Uint32Array(memory.buffer);\n    const id = U32[arr + ID_OFFSET >>> 2];\n    const info = getArrayInfo(id);\n    const align = getValueAlign(info);\n    let buf = info & STATICARRAY\n      ? arr\n      : U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = info & ARRAY\n      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]\n      : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT).subarray(buf >>>= align, buf + length);\n  }\n\n  extendedExports.__getArrayView = __getArrayView;\n\n  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */\n  function __getArray(arr) {\n    const input = __getArrayView(arr);\n    const len = input.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; i++) out[i] = input[i];\n    return out;\n  }\n\n  extendedExports.__getArray = __getArray;\n\n  /** Copies an ArrayBuffer's value from the module's memory. */\n  function __getArrayBuffer(ptr) {\n    const buffer = memory.buffer;\n    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n    return buffer.slice(ptr, ptr + length);\n  }\n\n  extendedExports.__getArrayBuffer = __getArrayBuffer;\n\n  /** Copies a typed array's values from the module's memory. */\n  function getTypedArray(Type, alignLog2, ptr) {\n    return new Type(getTypedArrayView(Type, alignLog2, ptr));\n  }\n\n  /** Gets a live view on a typed array's values in the module's memory. */\n  function getTypedArrayView(Type, alignLog2, ptr) {\n    const buffer = memory.buffer;\n    const U32 = new Uint32Array(buffer);\n    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);\n  }\n\n  /** Attach a set of get TypedArray and View functions to the exports. */\n  function attachTypedArrayFunctions(ctor, name, align) {\n    extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\n    extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\n  }\n\n  [\n    Int8Array,\n    Uint8Array,\n    Uint8ClampedArray,\n    Int16Array,\n    Uint16Array,\n    Int32Array,\n    Uint32Array,\n    Float32Array,\n    Float64Array\n  ].forEach(ctor => {\n    attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\n  });\n\n  if (BIGINT) {\n    [BigUint64Array, BigInt64Array].forEach(ctor => {\n      attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\n    });\n  }\n\n  /** Tests whether an object is an instance of the class represented by the specified base id. */\n  function __instanceof(ptr, baseId) {\n    const U32 = new Uint32Array(memory.buffer);\n    let id = U32[ptr + ID_OFFSET >>> 2];\n    if (id <= getRttiCount(U32)) {\n      do {\n        if (id == baseId) return true;\n        id = getBase(id);\n      } while (id);\n    }\n    return false;\n  }\n\n  extendedExports.__instanceof = __instanceof;\n\n  // Pull basic exports to extendedExports so code in preInstantiate can use them\n  extendedExports.memory = extendedExports.memory || memory;\n  extendedExports.table  = extendedExports.table  || table;\n\n  // Demangle exports and provide the usual utility on the prototype\n  return demangle(exports, extendedExports);\n}\n\nfunction isResponse(src) {\n  return typeof Response !== \"undefined\" && src instanceof Response;\n}\n\nfunction isModule(src) {\n  return src instanceof WebAssembly.Module;\n}\n\n/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */\nexport async function instantiate(source, imports = {}) {\n  if (isResponse(source = await source)) return instantiateStreaming(source, imports);\n  const module = isModule(source) ? source : await WebAssembly.compile(source);\n  const extended = preInstantiate(imports);\n  const instance = await WebAssembly.instantiate(module, imports);\n  const exports = postInstantiate(extended, instance);\n  return { module, instance, exports };\n}\n\n/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */\nexport function instantiateSync(source, imports = {}) {\n  const module = isModule(source) ? source : new WebAssembly.Module(source);\n  const extended = preInstantiate(imports);\n  const instance = new WebAssembly.Instance(module, imports);\n  const exports = postInstantiate(extended, instance);\n  return { module, instance, exports };\n}\n\n/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */\nexport async function instantiateStreaming(source, imports = {}) {\n  if (!WebAssembly.instantiateStreaming) {\n    return instantiate(\n      isResponse(source = await source)\n        ? source.arrayBuffer()\n        : source,\n      imports\n    );\n  }\n  const extended = preInstantiate(imports);\n  const result = await WebAssembly.instantiateStreaming(source, imports);\n  const exports = postInstantiate(extended, result.instance);\n  return { ...result, exports };\n}\n\n/** Demangles an AssemblyScript module's exports to a friendly object structure. */\nexport function demangle(exports, extendedExports = {}) {\n  const setArgumentsLength = exports[\"__argumentsLength\"]\n    ? length => { exports[\"__argumentsLength\"].value = length; }\n    : exports[\"__setArgumentsLength\"] || exports[\"__setargc\"] || (() => { /* nop */ });\n  for (let internalName in exports) {\n    if (!Object.prototype.hasOwnProperty.call(exports, internalName)) continue;\n    const elem = exports[internalName];\n    let parts = internalName.split(\".\");\n    let curr = extendedExports;\n    while (parts.length > 1) {\n      let part = parts.shift();\n      if (!Object.prototype.hasOwnProperty.call(curr, part)) curr[part] = {};\n      curr = curr[part];\n    }\n    let name = parts[0];\n    let hash = name.indexOf(\"#\");\n    if (hash >= 0) {\n      const className = name.substring(0, hash);\n      const classElem = curr[className];\n      if (typeof classElem === \"undefined\" || !classElem.prototype) {\n        const ctor = function(...args) {\n          return ctor.wrap(ctor.prototype.constructor(0, ...args));\n        };\n        ctor.prototype = {\n          valueOf() { return this[THIS]; }\n        };\n        ctor.wrap = function(thisValue) {\n          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });\n        };\n        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>\n          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))\n        );\n        curr[className] = ctor;\n      }\n      name = name.substring(hash + 1);\n      curr = curr[className].prototype;\n      if (/^(get|set):/.test(name)) {\n        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n          let getter = exports[internalName.replace(\"set:\", \"get:\")];\n          let setter = exports[internalName.replace(\"get:\", \"set:\")];\n          Object.defineProperty(curr, name, {\n            get() { return getter(this[THIS]); },\n            set(value) { setter(this[THIS], value); },\n            enumerable: true\n          });\n        }\n      } else {\n        if (name === 'constructor') {\n          (curr[name] = (...args) => {\n            setArgumentsLength(args.length);\n            return elem(...args);\n          }).original = elem;\n        } else { // instance method\n          (curr[name] = function(...args) { // !\n            setArgumentsLength(args.length);\n            return elem(this[THIS], ...args);\n          }).original = elem;\n        }\n      }\n    } else {\n      if (/^(get|set):/.test(name)) {\n        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n          Object.defineProperty(curr, name, {\n            get: exports[internalName.replace(\"set:\", \"get:\")],\n            set: exports[internalName.replace(\"get:\", \"set:\")],\n            enumerable: true\n          });\n        }\n      } else if (typeof elem === \"function\" && elem !== setArgumentsLength) {\n        (curr[name] = (...args) => {\n          setArgumentsLength(args.length);\n          return elem(...args);\n        }).original = elem;\n      } else {\n        curr[name] = elem;\n      }\n    }\n  }\n  return extendedExports;\n}\n\nexport default {\n  instantiate,\n  instantiateSync,\n  instantiateStreaming,\n  demangle\n};\n","import loader from \"@assemblyscript/loader\";\n\ninterface command {\n    action: string,\n    data: any\n}\n\nlet moduleExports;\n\nconst myself: Worker = self as any;\n\nmyself.onmessage = async (event) => {\n\n    const { action, data } = event.data as command;\n\n    switch (action) {\n\n        case \"loadWasm\":\n            const module = await loader.instantiate(data, {\n                env: {},\n                index: {\n                    print: console.log\n                }\n            });\n            moduleExports = module.exports;\n            myself.postMessage(null);\n        break;\n\n        case \"generate\":\n            const [width, height] = data as number[];\n            const pointer: number = moduleExports.generate(...data);\n            const imageDataArrayView: Uint8ClampedArray = moduleExports.__getUint8ClampedArrayView(pointer);\n            const imageDataArray = new Uint8ClampedArray(imageDataArrayView);\n            moduleExports.__collect();\n            myself.postMessage(imageDataArray);\n        break;\n\n        default:\n            console.error(\"Unknown action: \" + action);\n            myself.postMessage(null);\n        break;\n    }\n}\n"],"names":["BIGINT","BigUint64Array","THIS","Symbol","utf16","TextDecoder","fatal","getStringImpl","buffer","ptr","len","Uint32Array","wtf16","Uint16Array","String","fromCharCode","decode","str","off","subarray","preInstantiate","imports","extendedExports","getString","memory","env","abort","msg","file","line","colm","Error","trace","n","args","console","log","slice","join","seed","Date","now","Math","F_NOEXPORTRUNTIME","postInstantiate","instance","exports","table","__new","__pin","__unpin","__collect","__rtti_base","getRttiCount","arr","getArrayInfo","id","info","U32","getInfo","getBase","getValueAlign","clz32","getView","alignLog2","signed","float","Float32Array","Float64Array","Int8Array","Uint8Array","Int16Array","Int32Array","BigInt64Array","__getArrayView","align","buf","length","getTypedArray","Type","getTypedArrayView","bufPtr","attachTypedArrayFunctions","ctor","name","bind","__newString","U16","i","p","charCodeAt","__getString","__newArray","values","result","view","value","set","__getArray","input","out","Array","__getArrayBuffer","Uint8ClampedArray","forEach","BYTES_PER_ELEMENT","__instanceof","baseId","demangle","isResponse","src","Response","isModule","WebAssembly","Module","async","instantiate","source","instantiateStreaming","module","compile","extended","arrayBuffer","setArgumentsLength","internalName","Object","prototype","hasOwnProperty","call","elem","parts","split","curr","part","shift","hash","indexOf","className","substring","classElem","wrap","constructor","[object Object]","this","thisValue","create","writable","getOwnPropertyNames","defineProperty","getOwnPropertyDescriptor","test","getter","replace","setter","enumerable","original","get","instantiateSync","Instance","moduleExports","myself","self","onmessage","event","action","data","loader","index","print","postMessage","pointer","generate","imageDataArrayView","__getUint8ClampedArrayView","imageDataArray","error"],"mappings":"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"}